name: "Workflow"

on:
  push:
jobs:
  build:
    name: 'build and deploy to dev'
    runs-on: "ubuntu-latest"
    timeout-minutes: 20
    environment: dev
    steps:
      - uses: "actions/checkout@master"
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v4.10.1"
        id: "todo"
        with:
      - name: Checkout
        uses: actions/checkout@v3
      - run: git checkout ${{ github.ref_name }}
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.20
          server-id: malikeht-repo
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Cache Maven packages
        uses: actions/cache@v2.1.4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and publish jar
        id: build-jar
        run:
          mvn clean -Dgroups=unit-test test package deploy --file pom.xml
      - name: Assign version information
        id: vars
        run: |
          echo ::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
     # - name: Build and push Docker image
     #   id: build-image
     #   env:
     #     DOCKER_BUILDKIT: 1
     #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
     #     IMAGE_TAG: ${{ steps.vars.outputs.version }}
     #   run: |
     #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
     #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
     #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
     #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: write image version out to file
        shell: bash
        run: echo ${{ steps.vars.outputs.version }} > image-version.txt
      - name: store image version as artifact for production
        uses: actions/upload-artifact@v3
        with:
          name: image-version
          path: image-version.txt
      - name: write image id out to file
        shell: bash
        run: echo ${{ steps.build-image.outputs.image }} > image-id.txt
      - name: store image id as artifact for production
        uses: actions/upload-artifact@v3
        with:
          name: image-id
          path: image-id.txt